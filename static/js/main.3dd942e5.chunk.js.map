{"version":3,"sources":["Componentes/Componente/Navbarlayout.js","Componentes/Componente/Containerlayout.js","Componentes/Componente/CardLayout.js","Componentes/Contenedores/SearchContainer.js","Componentes/Componente/DigimonListLayout.js","Componentes/Componente/SpinnerLayout.js","Componentes/Contenedores/MainDigimonContainer.js","Componentes/Componente/FooterLayout.js","Componentes/Pages/Home.js","Componentes/Componente/InfoDigimonLayout.js","Componentes/Pages/DetailDigimon.js","Componentes/Pages/Page404.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","role","aria-label","to","ContainerLayout","CardLayout","Component","props","src","img","alt","name","level","DigimonList","Digimons","map","digimon","i","key","SpinnerLayout","MainDigimonContainer","state","IsLoading","inputData","errorMessage","_handleChange","e","console","log","target","value","setState","_hanldeSubmit","preventDefault","fetch","then","res","json","data","ErrorMsg","_renderSpinner","this","onSubmit","type","placeholder","onChange","onClick","length","FooterLayout","href","Home","React","InfoDigimon","DetailDigimon","_fetch","match","params","Page404","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3dd942e5.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <nav\r\n      className=\"navbar is-black\"\r\n      role=\"navigation\"\r\n      aria-label=\"main navigation\"\r\n    >\r\n      <div className=\"navbar-brand\">\r\n        <Link to=\"/Digimons\" className=\"navbar-item\">\r\n          Digimon Api\r\n        </Link>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\n\r\nconst ContainerLayout = () => {\r\n  return (\r\n    <div className=\"container is-fullhd \">\r\n      <div className=\"notification App-container\">\r\n        <strong>Digimon Api</strong> - Contém todos os Digimons da primeira\r\n        geração e todos aqueles que saíram da série Anime.\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContainerLayout;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst CardLayout = (props) => {\r\n  /* console.log('props', props); */\r\n\r\n  return (\r\n    <div className=\"card CardDigimon\">\r\n      <div className=\"card-image\">\r\n        <figure className=\"image is-128x128\">\r\n          <img src={props.img} alt={props.name} />\r\n        </figure>\r\n      </div>\r\n\r\n      <div className=\"media-content\">\r\n        <p className=\"title is-4\">{props.name}</p>\r\n        <p className=\"subtitle is-6\">{props.level}</p>\r\n        <Link\r\n          className=\"has-text-info\"\r\n          to={`/Digimons/DetailDigimon/${props.name}`}\r\n        >\r\n          Ver mais detalhes\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardLayout;\r\n","import React, { Component } from 'react';\r\n\r\nclass SearchContainer extends Component {\r\n  state = { inputData: '' };\r\n\r\n  _handleChange = (e) => {\r\n    console.log(e.target.value);\r\n    this.setState({ inputData: e.target.value });\r\n  };\r\n\r\n  _hanldeSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { inputData } = this.state;\r\n    fetch(`https://digimon-api.herokuapp.com/api/digimon/name/${inputData}`)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n        console.log('this.props._setState', this.props._setState);\r\n        this.props._setState(data);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <form className=\"field is-grouped \" onSubmit={this._hanldeSubmit}>\r\n          <p className=\"control is-expanded\">\r\n            <input\r\n              className=\"input\"\r\n              type=\"text\"\r\n              placeholder=\"Insira o nome aqui...\"\r\n              onChange={this._handleChange}\r\n            />\r\n          </p>\r\n          <p className=\"control\">\r\n            <button className=\"button is-info\" onClick={this._hanldeSubmit}>\r\n              Pesquisar\r\n            </button>\r\n          </p>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchContainer;\r\n","import React from 'react';\r\nimport CardDigimon from './CardLayout';\r\n\r\nconst DigimonList = (props) => {\r\n  return (\r\n    <div className=\"container DigimonList-item\">\r\n      {props.Digimons.map((digimon, i) => {\r\n        return (\r\n          <div key={i} className=\"DigimonList\">\r\n            <CardDigimon\r\n              name={digimon.name}\r\n              img={digimon.img}\r\n              level={digimon.level}\r\n            />\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DigimonList;\r\n","import React from 'react';\r\n\r\nconst SpinnerLayout = () => {\r\n    return (\r\n        <div className=\"loading-spinner\">\r\n            <div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\r\n            <p>Cargando!...</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SpinnerLayout;","import React, { Component } from 'react';\r\nimport SearchContainer from './SearchContainer';\r\nimport DigimonsList from './../Componente/DigimonListLayout';\r\nimport SpinnerLayout from './../Componente/SpinnerLayout';\r\n\r\nclass MainDigimonContainer extends Component {\r\n  state = { Digimons: [], IsLoading: false, inputData: '', errorMessage: '' };\r\n\r\n  componentDidMount() {\r\n    this.setState({ IsLoading: true });\r\n\r\n    fetch('https://digimon-api.herokuapp.com/api/digimon')\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n        this.setState({ Digimons: data, IsLoading: false });\r\n        console.log('Digimons ', this.state.Digimons);\r\n      });\r\n  }\r\n\r\n  _handleChange = (e) => {\r\n    console.log(e.target.value);\r\n    this.setState({ inputData: e.target.value });\r\n  };\r\n\r\n  _hanldeSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.setState({ IsLoading: true });\r\n\r\n    const { inputData } = this.state;\r\n\r\n    fetch(`https://digimon-api.herokuapp.com/api/digimon/name/${inputData}`)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n        /*  console.log(data.ErrorMsg); */\r\n\r\n        if (data.ErrorMsg) {\r\n          console.log('caiu no erro: ' + data.ErrorMsg);\r\n          this.setState({ errorMessage: data.ErrorMsg });\r\n        }\r\n\r\n        this.setState({ Digimons: data, IsLoading: false });\r\n        console.log('Pesquisa ', this.state.Digimons);\r\n      });\r\n  };\r\n\r\n  _renderSpinner = () => {\r\n    return <SpinnerLayout />;\r\n  };\r\n\r\n  render() {\r\n    const { Digimons, IsLoading, errorMessage } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"container\">\r\n          <form className=\"field is-grouped \" onSubmit={this._hanldeSubmit}>\r\n            <p className=\"control is-expanded\">\r\n              <input\r\n                className=\"input\"\r\n                type=\"text\"\r\n                placeholder=\"Insira o nome aqui...\"\r\n                onChange={this._handleChange}\r\n              />\r\n            </p>\r\n            <p className=\"control\">\r\n              <button className=\"button is-info\" onClick={this._hanldeSubmit}>\r\n                Pesquisar\r\n              </button>\r\n            </p>\r\n          </form>\r\n        </div>\r\n        {IsLoading\r\n          ? this._renderSpinner()\r\n          : Digimons.length > 0 && <DigimonsList Digimons={Digimons} />}\r\n        {errorMessage && <p className=\"CardDigimon\">{errorMessage}</p>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainDigimonContainer;\r\n","import React from 'react';\r\n\r\nconst FooterLayout = () =>{\r\n    return (\r\n        <footer className=\"footer\">\r\n        <div className=\"content has-text-centered \">\r\n            <p>\r\n            The website content  an Api Digimon\r\n            is licensed <a href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">Digimon Api</a>.\r\n            &copy; Copyright 2019\r\n            </p>\r\n        </div>\r\n    </footer>\r\n    );\r\n}\r\n\r\nexport default FooterLayout;","import React from 'react';\r\nimport Navbar from './../Componente/Navbarlayout';\r\nimport ContainerLayout from './../Componente/Containerlayout';\r\nimport MainDigimon from './../Contenedores/MainDigimonContainer';\r\nimport FooterLayout from './../Componente/FooterLayout';\r\n\r\nclass Home extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar />\r\n        <ContainerLayout />\r\n        <h1 className=\"title\">Digimon Api</h1>\r\n        <br />\r\n        <MainDigimon />\r\n        <FooterLayout />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const InfoDigimon = (props) => {\r\n  const { img, name, level } = props;\r\n  return (\r\n    <div className=\"container-fluid t_container \">\r\n      <div className=\"columns\">\r\n        <div className=\"column\">\r\n          <figure className=\"image is-4by3\">\r\n            <img src={img} alt={name} />\r\n          </figure>\r\n        </div>\r\n        <div className=\"column\">\r\n          <h2>Informações Gerais</h2>\r\n          <hr />\r\n          <h3>Nome: {name} </h3>\r\n          <br />\r\n          <p>Nivel: {level}</p>\r\n          <p></p>\r\n          <Link to=\"/Digimons\">Voltar</Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { InfoDigimon } from './../Componente/InfoDigimonLayout';\r\nimport Navbar from './../Componente/Navbarlayout';\r\n\r\nclass DetailDigimon extends React.Component {\r\n  static propTypes = {\r\n    match: PropTypes.shape({\r\n      params: PropTypes.object,\r\n      isExact: PropTypes.bool,\r\n      path: PropTypes.string,\r\n      url: PropTypes.string,\r\n    }),\r\n  };\r\n\r\n  state = { digimon: {} };\r\n\r\n  _fetch = ({ name }) => {\r\n    console.log('fetch');\r\n    fetch(`https://digimon-api.herokuapp.com/api/digimon/name/${name}`)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        let digimon = data[0];\r\n        this.setState({ digimon });\r\n      });\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { name } = this.props.match.params;\r\n    this._fetch({ name });\r\n  }\r\n\r\n  render() {\r\n    console.log('this.state.digimon', this.state.digimon);\r\n    const { img, name, level } = this.state.digimon;\r\n\r\n    return (\r\n      <div>\r\n        <Navbar />\r\n        <InfoDigimon img={img} level={level} name={name} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DetailDigimon;\r\n","import React from 'react';\r\nimport Navbar from './../Componente/Navbarlayout';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const Page404 = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <Navbar />\r\n      <h1>Page 404!</h1>\r\n      <span>No found Page.</span>\r\n      <br />\r\n      <Link to=\"/Digimons\">Voltar</Link>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Home from './Componentes/Pages/Home';\r\nimport DetailDigimon from './Componentes/Pages/DetailDigimon';\r\nimport { Page404 } from './Componentes/Pages/Page404';\r\n\r\nimport './App.css';\r\nimport 'bulma/css/bulma.css';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route exact path=\"/Digimons\" component={Home} />\r\n          <Route\r\n            exact\r\n            path=\"/Digimons/DetailDigimon/:name\"\r\n            component={DetailDigimon}\r\n          />\r\n          <Route component={Page404} />\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './App';\r\n \r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(\r\n    <BrowserRouter >\r\n        <App />\r\n    </BrowserRouter>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}