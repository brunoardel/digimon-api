{"version":3,"sources":["components/Navbar/index.jsx","components/Notification/index.jsx","components/Spinner/index.jsx","components/Card/index.jsx","components/Footer/index.jsx","services/digimons.js","pages/Home.js","components/CardDetails/index.jsx","pages/Details.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","role","aria-label","to","Notification","rel","href","target","Spinner","Card","props","name","img","level","src","alt","onError","e","onerror","width","Footer","getDigimons","url","a","fetch","method","headers","Accept","resp","status","json","Home","state","Digimons","IsLoading","inputData","errorMessage","handleChange","setState","value","handleSubmit","preventDefault","result","find","digimon","handleSearch","digimons","this","onSubmit","type","placeholder","onChange","onClick","length","map","i","key","Component","CardDetails","Details","Digimon","match","params","React","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.10b6e3fc.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Navbar = () => (\r\n  <nav\r\n    className=\"navbar is-black\"\r\n    role=\"navigation\"\r\n    aria-label=\"main navigation\"\r\n  >\r\n    <div className=\"navbar-brand\">\r\n      <Link to=\"/home\" className=\"navbar-item\">\r\n        Digimon Api\r\n      </Link>\r\n    </div>\r\n  </nav>\r\n);\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\n\r\nconst Notification = () => (\r\n  <div className=\"container is-fullhd \">\r\n    <div className=\"notification App-container\">\r\n      <strong>Digimon Api</strong> - Utilizando API disponivel{' '}\r\n      <a\r\n        rel=\"noopener noreferrer\"\r\n        href=\"https://digimon-api.herokuapp.com/api/digimon\"\r\n        target=\"_blank\"\r\n      >\r\n        aqui\r\n      </a>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Notification;\r\n","import React from 'react';\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"loading-spinner\">\r\n      <div className=\"lds-ring\">\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n      <p>Buscando...</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Card = ({ props: { name, img, level } }) => (\r\n  <div className=\"card\">\r\n    <img\r\n      src={img}\r\n      className=\"card__image card__image--fence\"\r\n      alt={name}\r\n      onError={(e) => {\r\n        e.target.onerror = null;\r\n        e.target.src = 'https://i.ibb.co/LRVdr48/broken-image.jpg';\r\n      }}\r\n      width={320}\r\n    />\r\n    <div className=\"card__content\">\r\n      <div className=\"card__title\">{name}</div>\r\n      <p className=\"card__text\">{level}</p>\r\n      <Link className=\"btn btn--block card__btn\" to={`/home/details/${name}`}>\r\n        detalhes\r\n      </Link>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\nconst Footer = () => (\r\n  <footer className=\"footer\">\r\n    <div className=\"content has-text-centered \">\r\n      <p>Digimon Api &copy; Copyright 2019</p>\r\n    </div>\r\n  </footer>\r\n);\r\n\r\nexport default Footer;\r\n","const getDigimons = async (url) => {\r\n  try {\r\n    const resp = await fetch(url, {\r\n      method: 'GET',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    if (resp.status === 200) {\r\n      return await resp.json();\r\n    } else {\r\n      return null;\r\n    }\r\n  } catch (err) {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport { getDigimons };\r\n","import React, { Component } from 'react';\r\nimport Navbar from '../components/Navbar';\r\nimport Notification from '../components/Notification';\r\nimport Spinner from '../components/Spinner';\r\nimport Card from '../components/Card';\r\nimport Footer from '../components/Footer';\r\nimport { getDigimons } from '../services/digimons';\r\n\r\nclass Home extends Component {\r\n  state = { Digimons: [], IsLoading: false, inputData: '', errorMessage: '' };\r\n\r\n  async componentDidMount() {\r\n    this.setState({ IsLoading: true });\r\n\r\n    const digimons = await getDigimons(\r\n      'https://digimon-api.herokuapp.com/api/digimon',\r\n    );\r\n\r\n    this.setState({ Digimons: digimons, IsLoading: false });\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({ inputData: e.target.value });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.setState({ IsLoading: true });\r\n\r\n    const result = this.state.Digimons.find(\r\n      (digimon) => digimon.name === this.state.inputData,\r\n    );\r\n\r\n    if (!result) {\r\n      this.setState({\r\n        IsLoading: false,\r\n        errorMessage: 'Digimon nÃ£o encontrado',\r\n      });\r\n    }\r\n\r\n    if (result) {\r\n      this.setState({\r\n        Digimons: [result],\r\n        IsLoading: false,\r\n        errorMessage: '',\r\n      });\r\n    }\r\n  };\r\n\r\n  handleSearch = async () => {\r\n    this.setState({ IsLoading: true, errorMessage: '' });\r\n\r\n    const digimons = await getDigimons(\r\n      'https://digimon-api.herokuapp.com/api/digimon',\r\n    );\r\n\r\n    this.setState({\r\n      Digimons: digimons,\r\n      IsLoading: false,\r\n      errorMessage: '',\r\n      inputData: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { Digimons, IsLoading, inputData, errorMessage } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <Navbar />\r\n        <Notification />\r\n        <h1 className=\"title\">Digimon Api</h1>\r\n        <br />\r\n        <div>\r\n          <div className=\"container\">\r\n            <form\r\n              className=\"field is-grouped form-search\"\r\n              onSubmit={this.handleSubmit}\r\n            >\r\n              <p className=\"control is-expanded\">\r\n                <input\r\n                  className=\"input\"\r\n                  type=\"search\"\r\n                  placeholder=\"Insira o nome aqui...\"\r\n                  value={inputData}\r\n                  onChange={this.handleChange}\r\n                />\r\n              </p>\r\n              <p className=\"control\">\r\n                <button className=\"button is-info\" onClick={this.handleSubmit}>\r\n                  Pesquisar\r\n                </button>\r\n              </p>\r\n            </form>\r\n\r\n            <div className=\"containerCards\">\r\n              {errorMessage && (\r\n                <>\r\n                  <p className=\"ErrorMessage\">{errorMessage}</p>\r\n                  <button\r\n                    className=\"button is-outlined ButtonReload\"\r\n                    onClick={this.handleSearch}\r\n                  >\r\n                    Recarregar lista\r\n                  </button>\r\n                </>\r\n              )}\r\n              {IsLoading && <Spinner />}\r\n              {!errorMessage && !IsLoading && Digimons.length > 0 && (\r\n                <ul className=\"cards\">\r\n                  {Digimons.map((digimon, i) => (\r\n                    <li className=\"cards__item\" key={i}>\r\n                      <Card props={digimon} />\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Footer />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst CardDetails = ({ name, img, level }) => (\r\n  <article className=\"detail__article\">\r\n    <img\r\n      src={img}\r\n      alt={name}\r\n      className=\"card__image card__image--fence\"\r\n      onError={(e) => {\r\n        e.target.onerror = null;\r\n        e.target.src = 'https://i.ibb.co/LRVdr48/broken-image.jpg';\r\n      }}\r\n      width={500}\r\n    />\r\n    <div className=\"detail__texts\">\r\n      <h3 className=\"heading post-category\">Detalhes</h3>\r\n      <h1 className=\"title post-title\">Nome: {name}</h1>\r\n      <p className=\"post-excerpt\">NÃ­vel: {level}</p>\r\n      <br />\r\n\r\n      <Link className=\"button is-info\" to=\"/home\">\r\n        Voltar\r\n      </Link>\r\n    </div>\r\n  </article>\r\n);\r\n\r\nexport default CardDetails;\r\n","import React from 'react';\r\nimport CardDetails from '../components/CardDetails';\r\nimport Navbar from '../components/Navbar';\r\nimport Spinner from '../components/Spinner';\r\nimport { getDigimons } from '../services/digimons';\r\n\r\nclass Details extends React.Component {\r\n  state = { Digimon: [], IsLoading: true };\r\n\r\n  async componentDidMount() {\r\n    this.setState({ IsLoading: true });\r\n    const { name } = this.props.match.params;\r\n\r\n    const Digimon = await getDigimons(\r\n      `https://digimon-api.herokuapp.com/api/digimon/name/${name}`,\r\n    );\r\n\r\n    this.setState({ Digimon: Digimon[0], IsLoading: false });\r\n  }\r\n\r\n  render() {\r\n    const { Digimon, IsLoading } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <Navbar />\r\n        <div className=\"container\">\r\n          {IsLoading && <Spinner />}\r\n          {!IsLoading && Digimon && <CardDetails {...this.state.Digimon} />}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Details;\r\n","import React from 'react';\r\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\r\nimport Home from './pages/Home';\r\nimport Details from './pages/Details';\r\n\r\nimport './App.css';\r\nimport 'bulma/css/bulma.css';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <BrowserRouter>\r\n          <Switch>\r\n            <Route exact path=\"/home\" component={Home} />\r\n            <Route exact path=\"/home/details/:name\" component={Details} />\r\n            <Redirect to=\"/home\" />\r\n          </Switch>\r\n        </BrowserRouter>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}